# What? No hashbang?? Nope, and that's intentional.
# We need this to run in the native shell environment that the user is running.
# Otherwise, we can't detect the proper shell we're actually using and install the right things.

if [ -n "$DOTFILES_ROOT" ]; then
  echo $DOTFILES_ROOT
else
  DOTFILES_ROOT=$(pwd -P)

  # Set the dotfiles root
  echo "export DOTFILES_ROOT=${DOTFILES_ROOT}" >> ~/.dotfiles_root
fi

setup_zsh () {
  echo "Set up OMZ..."

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" &
  wait

  echo "Copying main ZSH RC (because we don't always want to keep changes to this file) and adding environment variables and aliases."
  if [ -e "$HOME/.zshrc" ]; then
    echo "ZSH config already found, backing it up."
    mv $HOME/.zshrc $HOME/.zshrc.old
  fi
  cp $DOTFILES_ROOT/shell/zsh/zshrc $HOME/.zshrc

  # Set environment variables
  echo "Set environment variables."
  echo "source ${DOTFILES_ROOT}/shell/env/base" >> $HOME/.zshrc
}

setup_bash () {
  echo "Set up OMB..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)" &
  wait

  echo "Copying main Bash RC (because we don't always want to keep changes to this file) and adding environment variables and aliases."
  if [ -e "$HOME/.bashrc" ]; then
    echo "Bash config already found, backing it up."
    mv $HOME/.bashrc $HOME/.bashrc.old
  fi
  cp $DOTFILES_ROOT/shell/bash/bashrc $HOME/.bashrc
}

if [ "$CODESPACES" = "true" ]; then
  echo "In a Codespaces instance. Adding Codespaces-specific settings."

  # Source my dotfiles for zsh.
  echo "source /workspaces/.codespaces/.persistedshare/dotfiles/shell/zsh/codespaces" >> $HOME/.zshrc
else
  echo "Let's get our generic stuff out of the way, first. It doesn't really matter what nix platform we're on, other than Codespaces."

  if [ -e "$HOME/.gitconfig" ]; then
    echo "Existing gitconfig found, backing it up."
    mv $HOME/.gitconfig $HOME/.gitconfig.old
  fi
  echo "Linking gitconfig..."
  ln -s $DOTFILES_ROOT/git/gitconfig $HOME/.gitconfig

  if [ -e $HOME/.ssh/config ]; then
    echo "Existing ssh config found, backing it up."
    mv $HOME/.ssh/config $HOME/.ssh/config.old
  fi
  echo "Linking ssh config..."
  ln -s $DOTFILES_ROOT/ssh/config $HOME/.ssh/config

  if ! command -v brew &> /dev/null; then
    # Yes, we'll install it even for Linux. This makes getting NodeJS infinitely easier, even on Linux.
    echo "Homebrew not found, installing it..."
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  if ! command -v corepack &> /dev/null; then
    echo "Node not found, installing it..."
    # Corepack is now kept separate for some ungodly reason
    brew install node corepack
    echo "Enabling corepack, so we can use Yarn as intended."
    corepack enable
  fi

  if ! command -v uvx &> /dev/null; then
    # uv/uvx is the Python equivalent of npm/npx that Python so sorely needed
    echo "uv/uvx not found, installing it..."
    /bin/bash -c "$(curl -LsSf https://astral.sh/uv/install.sh)"
  fi

  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Looks like we're running on a Mac. Adding Mac-specific things."

    setup_zsh
    echo "source ${DOTFILES_ROOT}/shell/zsh/darwin" >> $HOME/.zshrc

    echo "And here we go!"
    source ~/.zshrc

  elif [[ "$OSTYPE" == "linux"* ]]; then
    # I only ever run Arch-based distros these days,
    # and most things are harmless to have on a non-Arch system,
    # so I'm not bothering to discern more beyond "it's Linux".
    # However, maybe one day that will change, so it's named "arch".
    echo "Looks like we're running Linux. Let's get it set up."

    if [[ "$SHELL" == *"zsh" ]]; then
      echo "We're using zsh, so let's set up zsh stuff."

      setup_zsh

      # Set aliases
      echo "Setting up shell-specific aliases..."
      echo "source ${DOTFILES_ROOT}/shell/aliases/arch" >> $HOME/.zshrc

      echo "And here we go!"
      source ~/.zshrc
    else
      echo "We're probably using bash here."

      setup_bash

      echo "Setting up shell-specific aliases..."
      echo "source ${DOTFILES_ROOT}/shell/aliases/base" >> $HOME/.bashrc
      echo "source ${DOTFILES_ROOT}/shell/aliases/arch" >> $HOME/.bashrc

      echo "And here we go!"
      source ~/.bashrc
    fi
  fi
fi
